<?php
/**
 * @file
 * Code for the Profiles feature.
 */

include_once 'pw_profiles.features.inc';

/**
 * Enlarges field output_name field in table user_filter_cache to 255 characters:
 */
function pw_profiles_update_7104() {
  db_change_field('user_filter_cache', 'output_name', 'output_name', array (
        'type' => 'varchar',
        'length' => 255,
        'not null' => true,
        'default' => '',
      ));
}

/**
 * Add index to the table to optimize select queries from pw_forms_filter_alter:
 */
function pw_profiles_update_7103() {
  db_add_index('user_filter_cache', 'pw_forms_filter_alter_ix', array('input_output_type',
      'input_role_name', 'input_parliament_name'));
}

/**
 * (Un-)Installs the needed cache table for user filters
 * @return array
 */
function pw_profiles_schema() {
  $schema['user_filter_cache'] = array (
    'fields' =>
    array (
      'output_tid' =>
      array (
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
        'default' => 0,
      ),
      'output_name' =>
      array (
        'type' => 'varchar',
        'length' => 45,
        'not null' => true,
        'default' => '',
      ),
      'input_output_type' =>
      array (
        'type' => 'varchar',
        'length' => 45,
        'not null' => true,
        'default' => '',
      ),
      'input_role_name' =>
      array (
        'type' => 'varchar',
        'length' => 45,
        'not null' => true,
        'default' => '',
      ),
      'input_parliament_name' =>
      array (
        'type' => 'varchar',
        'length' => 45,
        'not null' => true,
        'default' => '',
      ),
    ),
    'indexes' =>
    array (
    ),
    'unique_keys' =>
    array (
      'uniqueness' =>
      array (
        0 => 'output_tid',
        1 => 'output_name',
        2 => 'input_output_type',
        3 => 'input_role_name',
        4 => 'input_parliament_name',
      ),
    ),
    'module' => 'pw_profiles',
    'name' => 'user_filter_cache',
  );
  return $schema;
}

/**
 * This function maintains the cache table user_filter_cache
 */
function pw_profiles_cron() {
  // Short-running operation example, not using a queue:
  // Delete all expired records since the last cron run.
  $expires = variable_get('pw_profiles_cron_last_run', REQUEST_TIME);
  // Delete all unused items in the table:
  db_query('TRUNCATE TABLE {user_filter_cache}');

  // PARTIES - recreate the items in the table:
  db_query("INSERT INTO user_filter_cache (output_tid, output_name, input_output_type, input_role_name, input_parliament_name) SELECT DISTINCT tparty.tid as output_tid, tparty.name as output_name, 'party' as input_output_type, trole.name as input_role_name, tparl.name as input_parliament_name
		FROM users AS u
		INNER JOIN user_revision AS urev ON u.uid = urev.uid
		INNER JOIN field_revision_field_user_roles_for_view_mode_s AS ur ON ur.entity_type = 'user' AND u.uid = ur.entity_id AND urev.vid = ur.revision_id
		INNER JOIN taxonomy_term_data AS trole ON ur.field_user_roles_for_view_mode_s_tid = trole.tid
		INNER JOIN field_revision_field_user_parliament AS uparl ON uparl.entity_type = 'user' AND u.uid = uparl.entity_id AND urev.vid = uparl.revision_id
		INNER JOIN taxonomy_term_data AS tparl ON uparl.field_user_parliament_tid = tparl.tid
		INNER JOIN field_revision_field_user_party AS uparty ON uparty.entity_type = 'user' AND u.uid = uparty.entity_id AND urev.vid = uparty.revision_id
		INNER JOIN taxonomy_term_data AS tparty ON uparty.field_user_party_tid = tparty.tid
		WHERE u.status<>0");

// CONSTITUENCIES - recreate the items in the table:
  db_query("INSERT INTO user_filter_cache (output_tid, output_name, input_output_type, input_role_name, input_parliament_name) SELECT DISTINCT tparty.tid as output_tid, tparty.name as output_name, 'constituency' as input_output_type, trole.name as input_role_name, tparl.name as input_parliament_name
		FROM users AS u
		INNER JOIN user_revision AS urev ON u.uid = urev.uid
		INNER JOIN field_revision_field_user_roles_for_view_mode_s AS ur ON ur.entity_type = 'user' AND u.uid = ur.entity_id AND urev.vid = ur.revision_id
		INNER JOIN taxonomy_term_data AS trole ON ur.field_user_roles_for_view_mode_s_tid = trole.tid
		INNER JOIN field_revision_field_user_parliament AS uparl ON uparl.entity_type = 'user' AND u.uid = uparl.entity_id AND urev.vid = uparl.revision_id
		INNER JOIN taxonomy_term_data AS tparl ON uparl.field_user_parliament_tid = tparl.tid
		INNER JOIN field_revision_field_user_constituency AS uconstituency ON uconstituency.entity_type = 'user' AND u.uid = uconstituency.entity_id AND urev.vid = uconstituency.revision_id
		INNER JOIN taxonomy_term_data AS tparty ON uconstituency.field_user_constituency_tid = tparty.tid
		WHERE u.status<>0");

  variable_set('pw_profiles_cron_last_run', REQUEST_TIME);
}

function pw_profiles_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "user_profile_form") {
    unset($form["locale"]);
    $view = views_get_view('calendar');
    $view->set_display('block_2');
    $form['views_embedder'] = array(
      '#value' => views_embed_view('calendar', $display_id = 'block_2'),
      '#weight' => 0,
    );
  } elseif ($form_id == "user_revision_edit_form") {
    unset($form["field_user_external_url"]);
    unset($form["antispam_moderator"]);
    unset($form["ckeditor"]);
    unset($form["mimemail"]);
    unset($form["overlay_control"]);
    unset($form["xmlsitemap"]);
    unset($form["#groups"]["group_user_admin"]);
    unset($form["#fieldgroups"]["group_user_admin"]);
  }
}

/**
 * FFI: Saves changes to the user role in the corresponding taxonomy.
 * This is important for the profile switch that relies on this taxonomy.
 */
function pw_profiles_user_presave(&$edit, $account, $category) {
  // fetch the chosen roles from $edit['roles']:
  $roleIdArray = array();

  // $edit['roles'] is unset if user_save() is called programmatically with
  // modifications that do not include the roles. In order to reset the roles
  // anyway, we load the roles from the $account:
  if(!isset($edit['roles'])) {
    foreach ($account->roles as $key => $value)
      $edit['roles'][$key] = $key;
  }
  foreach ($edit['roles'] as $key => $value) {
    if(!empty($value)) {
      $roleIdArray[] = $key;
    }
  }
  // reset the $edit['field_user_roles_for_view_mode_s']['und'] array:
  $edit['field_user_roles_for_view_mode_s']['und'] = array();

  foreach ($roleIdArray as $roleId) {
    $role = user_role_load($roleId);
    $roleName = $role->name; // i.e., Politician
    // search for this roleName in the taxonomy:
    $taxonomyArray = taxonomy_get_term_by_name($roleName, 'pw_profile_roles_for_view_mode_switch');
    foreach ($taxonomyArray as $taxonomy) {
      $tid = $taxonomy->tid;
      $edit['field_user_roles_for_view_mode_s']['und'][] = array('tid' => "$tid");
      break; // If there are several taxonomies with the same name that's a data error.
    }
  }
}

/**
 * Implements hook_views_query_alter().
 * reduces views result to one user (politician) instead of many caused by user revisions
 */

function pw_profiles_views_query_alter(&$view, &$query) {
  if($view->name == 'profile_list_rev' || $view->name == 'pw_user_profile_fields_rev' && $view->current_display == 'block_1') {
     // add the group by on the user id field to prevent duplicates caused by user revisions
     // $query->add_field('users', 'uid', 'users_uid', array('function' => 'groupby'));
     // $query->add_groupby('users_uid');

     // add join user_archive_cache table to get rid of duplicates
     $join = new views_join();
     $join->table = 'user_archive_cache';
     $join->field = 'vid';
     $join->left_table = 'user_revision';
     $join->left_field = 'vid';
     $join->type = 'INNER';
     $query->add_relationship('user_archive_cache', $join, 'user_revision');
  }
}

/**
 * Implements hook_ds_pre_render_alter().
 * Trys to find string "[field_user_fname]" in question and answers view in profiles.
 * If found don't render the fields user_questions_and_answers and question_and_answers_filter.
 */
function pw_profiles_ds_pre_render_alter(&$layout_render_array, $context) {
  if(isset($layout_render_array['left_2'])){
    foreach($layout_render_array['left_2'] as $index => $render_array){
      if($render_array['#field_name'] == 'user_questions_and_answers' && strpos($render_array['#items'][0]['value'], '[field_user_fname]')){
        unset($layout_render_array['left_2'][$index]);
        if(isset($layout_render_array['right_2'])){
          foreach($layout_render_array['right_2'] as $index => $render_array){
            if($render_array['#field_name'] == 'question_and_answers_filter'){
              unset($layout_render_array['right_2'][$index]);
              break;
            }
          }
          break;
        }
      }
    }
  }
}
