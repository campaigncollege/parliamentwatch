<?php

/**
 * @file
 * Includes main hooks.
 */

// -- hooks

function pw_userarchives_cron($uid=null) {
    $query = check_user_archives_database($uid);

    // Delete the archive entries for the chosen users first:
    $res = $query->execute();
    while ($row = $res->fetchAssoc()) {
      db_delete('user_archive_cache')
        ->condition('user_name', $row["user_name"])
        ->execute();
    }

    // Insert new archive entries:
    $dbconnection = db_insert('user_archive_cache');
    $dbconnection->from($query)->execute(); // INSERT INTO ... FROM SELECT ...

    // Calculate number of questions, answers and q/a-ratio and insert them into:
    // (1) the revision table (for showing them in the profile view)
    // (2) the userarchive table (for showing them in the sidebar)

    $res1 = $query->execute();
    while ($row = $res1->fetchAssoc()) {
      $questionQuery = db_select('node', 'n');
      $questionQuery->addExpression('IFNULL(COUNT(n.nid), 0)', 'count');
      $questionQuery->join('field_data_field_dialogue_recipient', 'r', 'r.entity_type = \'node\' AND r.entity_id = n.nid');
      $questionQuery->join('field_data_field_dialogue_message_type', 'f', 'f.entity_type = \'node\' AND f.entity_id = n.nid');
      $questionQuery->join('field_revision_field_pw_parmliament', 'p', 'p.entity_id=n.nid');
      $questionQuery->join('taxonomy_term_data', 'rn', 'rn.tid=p.field_pw_parmliament_tid');
      $questionQuery->condition('r.field_dialogue_recipient_target_id', $row['uid']);
      $questionQuery->condition('n.status', 1);
      $questionQuery->condition('rn.name', $row['parliament_name']);
      $questionRes = $questionQuery->execute();
      $ratio = array();
      while ($questionRow = $questionRes->fetchAssoc()) {
        $qCount = $questionRow['count'];
        $archiveQuery = db_update('user_archive_cache')
                        ->fields(array('number_of_questions' => $qCount))
                        ->condition('uid', $row['uid'])
                        ->condition('vid', $row['vid']);
        $success = $archiveQuery->execute();
//        if ($success == 0) { // @ TODO
//
//        }
        $questionQuery = db_update('field_revision_field_user_questions_get')
                          ->fields(array('field_user_questions_get_value' => $qCount))
                          ->condition('entity_id', $row['uid'])
                          ->condition('revision_id', $row['vid']);
        $success = $questionQuery->execute();
        if ($success == 0) {
          db_merge('field_revision_field_user_questions_get')
            ->fields(array('entity_type' => 'user',
                           'bundle' => 'user',
                           'deleted' => 0,
                           'entity_id' => $row['uid'],
                           'revision_id' => $row['vid'],
                           'language' => 'und',
                           'delta' => 0,
                           'field_user_questions_get_value' => $qCount));
        }
        // @TODO check is that required?
//        $questionQuery = db_update('field_data_field_user_questions_get')
//                          ->fields(array('field_user_questions_get_value' => $qCount))
//                          ->condition('entity_id', $row['uid'])
//                          ->condition('revision_id', $row['vid']);
//        $success = $questionQuery->execute();
//        if ($success == 0) {
//          db_merge('field_data_field_user_questions_get')
//            ->fields(array('entity_type' => 'user',
//                           'bundle' => 'user',
//                           'deleted' => 0,
//                           'entity_id' => $row['uid'],
//                           'revision_id' => $row['vid'],
//                           'language' => 'und',
//                           'delta' => 0,
//                           'field_user_questions_get_value' => $qCount));
//        }
        $ratio[$row['uid']][$row['vid']]['q'] = $qCount;
      }

      $answerQuery = db_select('comment', 'c');
      $answerQuery->addExpression('COUNT(c.cid)', 'count');
      $answerQuery->join('field_data_field_dialogue_message_type', 'f', 'f.entity_type = \'comment\' AND f.entity_id = c.cid');
      $answerQuery->join('node', 'n', 'n.nid=c.nid');
      $answerQuery->join('field_revision_field_pw_parmliament', 'p', 'p.entity_id=n.nid');
      $answerQuery->join('taxonomy_term_data', 'rn', 'rn.tid=p.field_pw_parmliament_tid');
      $answerQuery->condition('c.uid', $row['uid']);
      $answerQuery->condition('c.status', 1);
      $answerQuery->condition('rn.name', $row['parliament_name']);
      $answerRes = $answerQuery->execute();
      while ($answerRow = $answerRes->fetchAssoc()) {
        $aCount = $answerRow['count'];
        $tmpRatio = 0;
        if (isset($ratio[$row['uid']][$row['vid']]['q']) && $ratio[$row['uid']][$row['vid']]['q'] != 0) {
          $tmpRatio = intval(($aCount / $ratio[$row['uid']][$row['vid']]['q']) * 100);
        }
        $archiveQuery = db_update('user_archive_cache')
                        ->fields(array('number_of_answers' => $aCount,
                                       'ratio_question_answer' => $tmpRatio,))
                        ->condition('uid', $row['uid'])
                        ->condition('vid', $row['vid']);
        $success = $archiveQuery->execute();
//        if ($success == 0) { // @ TODO
//
//        }
        $answerQuery = db_update('field_revision_field_user_answers_give')
                        ->fields(array('field_user_answers_give_value' => $aCount))
                        ->condition('entity_id', $row['uid'])
                        ->condition('revision_id', $row['vid']);
        $success = $answerQuery->execute();
        if ($success == 0) {
          db_merge('field_revision_field_user_answers_give')
            ->fields(array('entity_type' => 'user',
                           'bundle' => 'user',
                           'deleted' => 0,
                           'entity_id' => $row['uid'],
                           'revision_id' => $row['vid'],
                           'language' => 'und',
                           'delta' => 0,
                           'field_user_answers_give_value' => $aCount));
        }
        // @TODO check is that required?
//        $answerQuery = db_update('field_data_field_user_answers_give')
//                        ->fields(array('field_user_answers_give_value' => $aCount))
//                        ->condition('entity_id', $row['uid'])
//                        ->condition('revision_id', $row['vid']);
//        $success = $answerQuery->execute();
//        if ($success == 0) {
//          db_merge('field_data_field_user_answers_give')
//            ->fields(array('entity_type' => 'user',
//                           'bundle' => 'user',
//                           'deleted' => 0,
//                           'entity_id' => $row['uid'],
//                           'revision_id' => $row['vid'],
//                           'language' => 'und',
//                           'delta' => 0,
//                           'field_user_answers_give_value' => $aCount));
//        }
        $ratioQuery = db_update('field_revision_field_user_ratio_question_answer')
                        ->fields(array('field_user_ratio_question_answer_value' => $tmpRatio))
                        ->condition('entity_id', $row['uid'])
                        ->condition('revision_id', $row['vid']);
        $success = $ratioQuery->execute();
        if ($success == 0) {
          db_merge('field_revision_field_user_ratio_question_answer')
            ->fields(array('entity_type' => 'user',
                           'bundle' => 'user',
                           'deleted' => 0,
                           'entity_id' => $row['uid'],
                           'revision_id' => $row['vid'],
                           'language' => 'und',
                           'delta' => 0,
                           'field_user_ratio_question_answer_value' => $tmpRatio));
        }
        // @TODO check is that required?
//        $ratioQuery = db_update('field_data_field_user_ratio_question_answer')
//                        ->fields(array('field_user_ratio_question_answer_value' => $tmpRatio))
//                        ->condition('entity_id', $row['uid'])
//                        ->condition('revision_id', $row['vid']);
//        $success = $ratioQuery->execute();
//        if ($success == 0) {
//          db_merge('field_data_field_user_ratio_question_answer')
//            ->fields(array('entity_type' => 'user',
//                           'bundle' => 'user',
//                           'deleted' => 0,
//                           'entity_id' => $row['uid'],
//                           'revision_id' => $row['vid'],
//                           'language' => 'und',
//                           'delta' => 0,
//                           'field_user_ratio_question_answer_value' => $tmpRatio));
//        }
      }

    }

    return "Done";
}

// -- functions

/**
 * Creates schema for user archive if necessary, selects and returns users and
 * their revisions that have changed in the last 24 hours.
 * @return type
 */
function check_user_archives_database($uid=null) {

    $a_day_ago = time() - (2000 * 60 * 60);

    $query = db_select('user_revision', 'ur');
    $query->addField('ur', 'uid');
    $query->addField('ur', 'name', 'user_name');
    $query->addExpression('MAX(ur.vid)', 'vid');
    $query->addField('td', 'name', 'parliament_name');
    $query->addField('ur', 'timestamp');
    $query->addExpression('LOWER(rn.name)', 'user_role');
    $query->join('field_revision_field_user_parliament', 'up', 'ur.uid = up.entity_id AND ur.vid = up.revision_id');
    $query->join('taxonomy_term_data', 'td', 'td.tid=up.field_user_parliament_tid');
    $query->join('field_revision_field_user_roles_for_view_mode_s', 'ro', 'ro.entity_id=ur.uid AND ro.revision_id=ur.vid');
    $query->join('taxonomy_term_data', 'rn', 'rn.tid=ro.field_user_roles_for_view_mode_s_tid');
    $query->condition('ur.status', '1');
    if ($uid != null) {
      $query->condition('ur.uid', $uid);
    }
    $query->condition('ur.timestamp', $a_day_ago, '>');
    $query->condition('rn.name', array('Deputy', 'Candidate'), 'IN');
    $query->groupBy('ur.uid, up.field_user_parliament_tid, ro.field_user_roles_for_view_mode_s_tid');

    return $query;
}

/**
 * Implementation of hook_menu() for testing the cron functionality.
 */
function pw_userarchives_menu() {
  $items['admin/config/pw_userarchives/settings'] = array(
      'title' => 'PW Userarchives Cron',
      'description' => 'Run daily cron manually.',
      'page callback' => 'pw_userarchives_cron',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
