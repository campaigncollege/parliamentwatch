<?php

/**
 * @file
 * Module for the dialogue import.
 */

include_once 'pw_dialogues.features.inc';

/**
 * A buffer of overlap between the imports in seconds.
 */
define('PW_DIALOGUES_INTERVAL', 86400); // one day buffer

/**
 * Implements hook_menu().
 */
function pw_dialogues_menu() {
  $menu['admin/config/services/pw-dialogues-importer'] = array(
    'title' => 'Dialogue importer',
    'description' => 'Configure the source URL for the dialogue importer.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_dialogues_settings_form'),
    'access arguments' => array('import dialogue_importer feeds'),
  );

  $menu['api/import/dialogue/%'] = array(
    'title' => 'imports dialogue',
    'access arguments' => array('access content'),
    'page callback' => 'pw_dialogues_triggered_import',
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $menu;
}

/**
 * Implements hook_menu().
 */
function pw_dialogues_triggered_import() {
  drupal_add_http_header('Content-type', 'text/plain; charset=utf8');
  $status = false;
  if(is_numeric(arg(3))){
    $dialogue_id = arg(3);
    $source = variable_get('pw_dialogues_importer_source');
    $source .= $dialogue_id;
    $source .= '?unreleased=1';
    pw_dialogues_do_import($source);

    // check if dialogue was imported
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'dialogue')
          ->fieldCondition('field_dialogue_id', 'value', $dialogue_id);
    $result = $query->execute();
    if (isset($result['node'])) {
      $dialogue_nid = key($result['node']);
      $node = node_load($dialogue_nid);
      $recipient_id = $node->field_dialogue_recipient['und'][0]['target_id'];

      // TODO: check if comments were imported

      // set status to true and clear cache
      if(is_numeric($recipient_id) && ($user = user_load($recipient_id)) || $node->status != 1){
        cache_clear_all($GLOBALS['base_url'].'/profile/'.$user->name, 'cache_page', TRUE);
        $status = TRUE;
      }
    }
  }
  print $status?'OK':'FAILED';
}

/**
 * Form constructor for the dialogues importer settings form.
 *
 * @ingroup forms
 */
function pw_dialogues_settings_form($form, &$form_state) {
  $form['pw_dialogues_source'] = array(
    '#type' => 'textfield',
    '#title' => t('XML source API'),
    '#default_value' => variable_get('pw_dialogues_importer_source', ''),
    '#description' => t('If set, dialogues will be imported from this URL during cron runs.'),
    '#element_validate' => array('pw_dialogues_validate_url'),
    '#size' => 100,
  );

  return system_settings_form($form);
}

/**
 * Form element validation handler for pw_dialogues_settings_form().
 */
function pw_dialogues_validate_url(&$element, &$form_state) {
  $value = trim($element['#value']);
  form_set_value($element, $value, $form_state);

  if ($value != '' && !valid_url($value, TRUE)) {
    form_error($element, t('The URL %url is not valid.', array('%url' => $value)));
  }
}

/**
 * Implements hook_cron().
 * imports all dialugues once at night. 
 * Normally all dialogues should be already imported 
 * by push request to api/import/dialogue/% via the moderation backend.
 */
function pw_dialogues_cron() {

  // import only at night
  if(date('H') < 6){
  
    // get import base url
    if ($source = variable_get('pw_dialogues_importer_source')) {

      // append the updated_since GET parameter to the source URL.
      if ($last_import = variable_get('pw_dialogues_importer_last_import', 0)) {
 
        // import only every X days / hours/ etc
        if($last_import < time() - PW_DIALOGUES_INTERVAL){

          // import buffer: 1.5 of import interval
          $updated_since_timestamp = $last_import - PW_DIALOGUES_INTERVAL * 1.5;
          $updated_since = date('Y-m-d\\TH:i:s', $updated_since_timestamp);
          if (strpos($source, '?') === FALSE) {
            $source .= '?updated_since=' . $updated_since;
          }
          else {
            $source .= '&updated_since=' . $updated_since;
          }

          // do the import
          pw_dialogues_do_import($source);

          // trigger userarchive cron which 
          if(function_exists('pw_userarchives_cron')){

            // query which politicians have a changed question and answer count.
            $users = db_query('SELECT DISTINCT f.field_dialogue_recipient_target_id
                                FROM {field_data_field_dialogue_recipient} AS f 
                                INNER JOIN {feeds_item} AS i ON f.entity_type = i.entity_type AND f.entity_id = i.entity_id
                                WHERE i.imported >= :imported', array(':imported' => $updated_since_timestamp))->fetchCol();
                        
            // rewrite user archive cache table
            foreach ($users as $uid) {
              pw_userarchives_cron($uid);
            }
          }
 
          // save last import date
          variable_set('pw_dialogues_importer_last_import', REQUEST_TIME);
        }
      }
    }
  }
}

/**
 * starts feeds import
 */
function pw_dialogues_do_import($source) {

  // Import dialogues (questions).
  $dialogue_feed = feeds_source('dialogue_importer');
  $dialogue_feed->addConfig(array(
    'FeedsHTTPFetcher' => array(
	  'source' => $source,
    ),
  ));
  while (FEEDS_BATCH_COMPLETE != $dialogue_feed->import());

  // Import messages (answers).
  $message_feed = feeds_source('dialogue_message_importer');
  $message_feed->addConfig(array(
    'FeedsHTTPFetcher' => array(
  	'source' => $source,
    ),
  ));
  while (FEEDS_BATCH_COMPLETE != $message_feed->import());

  // add watchdog message
  watchdog('dialogue_importer', 'dialogues imported from '.$source);

  return TRUE;
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function pw_dialogues_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  if ($bundle_name === NULL) {
    return;
  }

  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);
    if ($info['type'] == 'entityreference') {
      $targets[$name . ':uuid'] = array(
        'name' => t('@label (by UUID)', array('@label' => $instance['label'])),
        'callback' => 'pw_dialogues_feeds_set_target',
      );
    }
  }

  if (isset($targets['uid'])) {
    $targets['uid:uuid'] = array(
      'name' => t('uid (by UUID)', array('@label' => $instance['label'])),
      'callback' => 'pw_dialogues_feeds_set_target',
    );
  }
}

/**
 * Performs entity reference mapping by UUID.
 *
 * @see entityreference_feeds_set_target().
 */
function pw_dialogues_feeds_set_target($source, $entity, $target, $value, $mapping) {
  if (empty($value)) {
    return;
  }

  if (is_array($value)) {
    $values = $value;
  }
  else {
    $values = array($value);
  }

  list($target) = explode(':', $target, 2);

  $info = field_info_field($target);
  $language = isset($mapping['language']) ? $mapping['language'] : LANGUAGE_NONE;

  $entity_ids = db_select('users', 'u')
    ->fields('u', array('uuid', 'uid'))
    ->condition('uuid', array_values($values), 'IN')
    ->execute()
    ->fetchAllKeyed();

  $iterator = 0;
  $field = isset($entity->target) ? $entity->target : array();
  foreach ($entity_ids as $entity_id) {
    if ($entity_id) {
      if ($info) {
        $field[$language][$iterator]['target_id'] = $entity_id;
      }
      else {
        $field = $entity_id;
      }
    }
    else {
      unset($entity->feeds_item->hash);
    }

    if (!$info || $info['cardinality'] == 1) {
      break;
    }
    $iterator++;
  }

  $entity->{$target} = $field;
}

/**
 * modifies data on dialogue save (or import via api).
 * 
 */
function pw_dialogues_entity_presave($entity, $type) {

  // Force URL alias for dialogues
  if ($type == 'node' && $entity->nid && $entity->type == 'dialogue') {
    module_load_include('inc', 'pathauto');
    $entity->path['pathauto'] = TRUE;
    $alias_action = variable_get('pathauto_update_action', 0);
    variable_set('pathauto_update_action', PATHAUTO_UPDATE_ACTION_DELETE);
    $entity->path = pathauto_node_update_alias($entity, 'update');
    variable_set('pathauto_update_action', $alias_action);
  }

  // delete dialogue answer if its status is 0
  elseif ($type == 'comment' && $entity->status == 0) {
    entity_delete($type, $entity->cid);
  }
}
